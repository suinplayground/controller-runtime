// Code generated by controller-gen. DO NOT EDIT.

package client

import (
	v1 "github.com/suinplayground/controller-runtime-playground/01-server-side-apply/api/v1"
	apiv1 "github.com/suinplayground/controller-runtime-playground/01-server-side-apply/client/api/v1"
	internal "github.com/suinplayground/controller-runtime-playground/01-server-side-apply/client/internal"
	runtime "k8s.io/apimachinery/pkg/runtime"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	managedfields "k8s.io/apimachinery/pkg/util/managedfields"
)

// ForKind returns an apply configuration type for the given GroupVersionKind, or nil if no
// apply configuration type exists for the given GroupVersionKind.
func ForKind(kind schema.GroupVersionKind) interface{} {
	switch kind {
	// Group=example.com, Version=v1
	case v1.SchemeGroupVersion.WithKind("Cat"):
		return &apiv1.CatApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("CatSpec"):
		return &apiv1.CatSpecApplyConfiguration{}
	case v1.SchemeGroupVersion.WithKind("CatStatus"):
		return &apiv1.CatStatusApplyConfiguration{}

	}
	return nil
}

func NewTypeConverter(scheme *runtime.Scheme) managedfields.TypeConverter {
	return managedfields.NewSchemeTypeConverter(scheme, internal.Parser())
}
